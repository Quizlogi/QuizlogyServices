// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  name       String?
  username   String     @unique
  email      String     @unique
  password   String
  role_id    Int
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  role       Role       @relation(fields: [role_id], references: [id])
  UserQuiz   UserQuiz[]
  Session    Session[]
  Quiz       Quiz[]
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  User       User[]
}

model Quiz {
  id          String     @id @default(uuid())
  title       String
  description String
  image       String
  category_id String
  user_id     String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  category    Category   @relation(fields: [category_id], references: [id])
  user        User       @relation(fields: [user_id], references: [id])
  questions   Question[]
  user_quiz    UserQuiz[]
  session     Session[]
}

model Category {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  quiz       Quiz[]
}

model Question {
  id         String       @id @default(uuid())
  question   String
  quiz_id    String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  options    Option[]
  quiz       Quiz         @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  UserAnswer UserAnswer[]
}

model Option {
  id          String       @id @default(uuid())
  option      String
  is_correct  Boolean      @default(false)
  question_id String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  question    Question     @relation(fields: [question_id], references: [id], onDelete: Cascade)
  UserAnswer  UserAnswer[]
}

model UserQuiz {
  id         String       @id @default(uuid())
  user_id    String
  quiz_id    String
  score      Int
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  user       User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  quiz       Quiz         @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  UserAnswer UserAnswer[]
}

model UserAnswer {
  id           String   @id @default(uuid())
  user_quiz_id String
  question_id  String
  option_id    String   
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user_quiz    UserQuiz @relation(fields: [user_quiz_id], references: [id], onDelete: Cascade)
  question     Question @relation(fields: [question_id], references: [id], onDelete: Cascade)
  option       Option   @relation(fields: [option_id], references: [id], onDelete: Cascade)
}

model Session {
  id         String   @id @default(uuid())
  session_id String   @unique @default(uuid())
  user_id    String
  quiz_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  quiz       Quiz     @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
}
